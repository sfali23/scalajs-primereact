package com.alphasystem.primereact.demo.components.button

import com.alphasystem.primereact.component.badge.BadgeType
import com.alphasystem.primereact.component.button.{
  ButtonBuilder,
  ButtonSize,
  IconPos,
  Severity
}
import japgolly.scalajs.react._
import japgolly.scalajs.react.vdom.all._
import scalacss.ScalaCssReactImplicits
import com.alphasystem.primereact.demo.ButtonDemoCss
import com.alphasystem.primereact.icons.Icon

object ButtonShowcase extends ScalaCssReactImplicits {

  private val css = ButtonDemoCss

  case class Backend(b: BackendScope[Unit, Unit]) {

    def render: VdomElement = {
      div(cls := "content-section implementation button-demo")(
        div(cls := "card")(
          h5("Basic"),
          ButtonBuilder().label("Submit").toButton,
          ButtonBuilder().label("Disabled").toButton(disabled := true),
          ButtonBuilder().label("Link").link.toButton,
          h5("Icons"),
          ButtonBuilder().icon(Icon.Check).toButton,
          ButtonBuilder().label("Submit").icon(Icon.Check).toButton,
          ButtonBuilder()
            .label("Submit")
            .icon(Icon.Check)
            .iconPos(IconPos.Right)
            .toButton,
          //
          h5("Severities"),
          ButtonBuilder().label("Primary").toButton,
          ButtonBuilder()
            .label("Secondary")
            .severity(Severity.Secondary)
            .toButton,
          ButtonBuilder().label("Success").severity(Severity.Success).toButton,
          ButtonBuilder().label("Info").severity(Severity.Info).toButton,
          ButtonBuilder().label("Warning").severity(Severity.Warning).toButton,
          ButtonBuilder().label("Help").severity(Severity.Help).toButton,
          ButtonBuilder().label("Danger").severity(Severity.Danger).toButton,
          //
          h5("Raised Buttons"),
          ButtonBuilder().label("Primary").raised.toButton,
          ButtonBuilder()
            .label("Secondary")
            .raised
            .severity(Severity.Secondary)
            .toButton,
          ButtonBuilder()
            .label("Success")
            .raised
            .severity(Severity.Success)
            .toButton,
          ButtonBuilder()
            .label("Info")
            .raised
            .severity(Severity.Info)
            .toButton,
          ButtonBuilder()
            .label("Warning")
            .raised
            .severity(Severity.Warning)
            .toButton,
          ButtonBuilder()
            .label("Help")
            .raised
            .severity(Severity.Help)
            .toButton,
          ButtonBuilder()
            .label("Danger")
            .raised
            .severity(Severity.Danger)
            .toButton,
          //
          h5("Rounded Buttons"),
          ButtonBuilder().label("Primary").rounded.toButton,
          ButtonBuilder()
            .label("Secondary")
            .rounded
            .severity(Severity.Secondary)
            .toButton,
          ButtonBuilder()
            .label("Success")
            .rounded
            .severity(Severity.Success)
            .toButton,
          ButtonBuilder()
            .label("Info")
            .rounded
            .severity(Severity.Info)
            .toButton,
          ButtonBuilder()
            .label("Warning")
            .rounded
            .severity(Severity.Warning)
            .toButton,
          ButtonBuilder()
            .label("Help")
            .rounded
            .severity(Severity.Help)
            .toButton,
          ButtonBuilder()
            .label("Danger")
            .rounded
            .severity(Severity.Danger)
            .toButton,
          //
          h5("Text Buttons"),
          ButtonBuilder().label("Primary").text.toButton,
          ButtonBuilder()
            .label("Secondary")
            .text
            .severity(Severity.Secondary)
            .toButton,
          ButtonBuilder()
            .label("Success")
            .text
            .severity(Severity.Success)
            .toButton,
          ButtonBuilder().label("Info").text.severity(Severity.Info).toButton,
          ButtonBuilder()
            .label("Warning")
            .text
            .severity(Severity.Warning)
            .toButton,
          ButtonBuilder().label("Help").text.severity(Severity.Help).toButton,
          ButtonBuilder()
            .label("Danger")
            .text
            .severity(Severity.Danger)
            .toButton,
          ButtonBuilder().label("Plain").text.severity(Severity.Plain).toButton,
          //
          h5("Raised Text Buttons"),
          ButtonBuilder().label("Primary").text.raised.toButton,
          ButtonBuilder()
            .label("Secondary")
            .text
            .raised
            .severity(Severity.Secondary)
            .toButton,
          ButtonBuilder()
            .label("Success")
            .text
            .raised
            .severity(Severity.Success)
            .toButton,
          ButtonBuilder()
            .label("Info")
            .text
            .raised
            .severity(Severity.Info)
            .toButton,
          ButtonBuilder()
            .label("Warning")
            .text
            .raised
            .severity(Severity.Warning)
            .toButton,
          ButtonBuilder()
            .label("Help")
            .text
            .raised
            .severity(Severity.Help)
            .toButton,
          ButtonBuilder()
            .label("Danger")
            .text
            .raised
            .severity(Severity.Danger)
            .toButton,
          ButtonBuilder()
            .label("Plain")
            .text
            .raised
            .severity(Severity.Plain)
            .toButton,
          //
          h5("Outlined Buttons"),
          ButtonBuilder()
            .label("Primary")
            .outlined
            .toButton,
          ButtonBuilder()
            .label("Secondary")
            .outlined
            .severity(Severity.Secondary)
            .toButton,
          ButtonBuilder()
            .label("Success")
            .outlined
            .severity(Severity.Success)
            .toButton,
          ButtonBuilder()
            .label("Info")
            .outlined
            .severity(Severity.Info)
            .toButton,
          ButtonBuilder()
            .label("Warning")
            .outlined
            .severity(Severity.Warning)
            .toButton,
          ButtonBuilder()
            .label("Help")
            .outlined
            .severity(Severity.Help)
            .toButton,
          ButtonBuilder()
            .label("Danger")
            .outlined
            .severity(Severity.Danger)
            .toButton,
          //
          h5("Rounded Icon Buttons"),
          ButtonBuilder()
            .icon(Icon.Check)
            .rounded
            .toButton,
          ButtonBuilder()
            .icon(Icon.Bookmark)
            .rounded
            .severity(Severity.Secondary)
            .toButton,
          ButtonBuilder()
            .icon(Icon.Search)
            .rounded
            .severity(Severity.Success)
            .toButton,
          ButtonBuilder()
            .icon(Icon.User)
            .rounded
            .severity(Severity.Info)
            .toButton,
          ButtonBuilder()
            .icon(Icon.Bell)
            .rounded
            .severity(Severity.Warning)
            .toButton,
          ButtonBuilder()
            .icon(Icon.Heart)
            .rounded
            .severity(Severity.Help)
            .toButton,
          ButtonBuilder()
            .icon(Icon.Times)
            .rounded
            .severity(Severity.Danger)
            .toButton,
          h5("Rounded Icon Text Buttons"),
          ButtonBuilder()
            .icon(Icon.Check)
            .text
            .rounded
            .toButton,
          ButtonBuilder()
            .icon(Icon.Bookmark)
            .text
            .rounded
            .severity(Severity.Secondary)
            .toButton,
          ButtonBuilder()
            .icon(Icon.Search)
            .text
            .rounded
            .severity(Severity.Success)
            .toButton,
          ButtonBuilder()
            .icon(Icon.User)
            .text
            .rounded
            .severity(Severity.Info)
            .toButton,
          ButtonBuilder()
            .icon(Icon.Bell)
            .text
            .rounded
            .severity(Severity.Warning)
            .toButton,
          ButtonBuilder()
            .icon(Icon.Heart)
            .text
            .rounded
            .severity(Severity.Help)
            .toButton,
          ButtonBuilder()
            .icon(Icon.Times)
            .text
            .rounded
            .severity(Severity.Danger)
            .toButton,
          ButtonBuilder()
            .icon(Icon.Filter)
            .text
            .rounded
            .severity(Severity.Plain)
            .toButton,
          //
          h5("Rounded and Outlined Icon Buttons"),
          ButtonBuilder()
            .icon(Icon.Check)
            .outlined
            .rounded
            .toButton,
          ButtonBuilder()
            .icon(Icon.Bookmark)
            .outlined
            .rounded
            .severity(Severity.Secondary)
            .toButton,
          ButtonBuilder()
            .icon(Icon.Search)
            .outlined
            .rounded
            .severity(Severity.Success)
            .toButton,
          ButtonBuilder()
            .icon(Icon.User)
            .outlined
            .rounded
            .severity(Severity.Info)
            .toButton,
          ButtonBuilder()
            .icon(Icon.Bell)
            .outlined
            .rounded
            .severity(Severity.Warning)
            .toButton,
          ButtonBuilder()
            .icon(Icon.Heart)
            .outlined
            .rounded
            .severity(Severity.Help)
            .toButton,
          ButtonBuilder()
            .icon(Icon.Times)
            .outlined
            .rounded
            .severity(Severity.Danger)
            .toButton,
          //
          h5("Badges"),
          ButtonBuilder().label("Emails").badge("8").toButton,
          ButtonBuilder()
            .label("Messages")
            .badge("8")
            .icon(Icon.Users)
            .badgeType(BadgeType.Danger)
            .severity(Severity.Warning)
            .toButton,
          //
          h5("Button Set"),
          span(cls := "p-buttonset")(
            ButtonBuilder().label("Save").icon(Icon.Check).toButton,
            ButtonBuilder().label("Delete").icon(Icon.Trash).toButton,
            ButtonBuilder().label("Cancel").icon(Icon.Times).toButton
          ),
          //
          h5("Sizes"),
          div(cls := "sizes")(
            ButtonBuilder()
              .label("Small")
              .icon(Icon.Check)
              .size(ButtonSize.Small)
              .toButton,
            ButtonBuilder().label("Normal").icon(Icon.Check).toButton,
            ButtonBuilder()
              .label("Large")
              .icon(Icon.Check)
              .size(ButtonSize.Large)
              .toButton
          )
        ) // end of "card"
      ) // end of "content-section implementation"
    }
  }

  private val component = ScalaComponent
    .builder[Unit]("ButtonShowcase")
    .renderBackend[Backend]
    .build

  def apply(): VdomElement = component()
}
